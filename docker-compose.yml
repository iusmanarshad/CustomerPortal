version: '3.9'

services:

  web:
    image: nginx:1.20-alpine
    container_name: ${SERVICE_PROXY}_${ENV}
    restart: unless-stopped
    working_dir: /var/www
    env_file: .env
    volumes:
      - ./:/var/www
      - ./docker/config/nginx/includes:/etc/nginx/includes
      - ./docker/config/nginx/conf/${ENV}.conf:/etc/nginx/conf.d/default.conf
      - ./docker/logs/nginx:/var/log/nginx
      - ${CERTS_DIRECTORY}:/etc/nginx/certs
    depends_on:
      - core
      - supervisor
    ports:
      - 80:80
      - 443:443
    healthcheck:
      test: curl --fail http://localhost || exit 1
      retries: 3
      timeout: 5s
    networks:
      network:
        aliases:
          - drummlaw.local

  core:
    build:
      context: ./
      dockerfile: ./docker/config/php/php-dockerfile
    container_name: ${SERVICE_CORE}
    restart: unless-stopped
    working_dir: /var/www
    env_file:
      - .env
    environment:
      SERVICE_NAME: ${SERVICE_CORE}
      SERVICE_TAGS: ${ENV}
      APP_URL: ${APP_URL}
      DB_CONNECTION: ${DB_CONNECTION}
      DB_HOST: ${SERVICE_CORE_DB}
      DB_DATABASE: ${DB_DATABASE}_${ENV}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PREFIX: ${CORE_DB_PREFIX}
    volumes:
      - ./:/var/www
      - ./docker/config/php/core.${ENV}.ini:/usr/local/etc/php/conf.d/custom.ini
      - ${CERTS_DIRECTORY}:/etc/certs
    depends_on:
      db:
        condition: service_healthy
    expose:
      - 9000
    networks:
      - network

  supervisor:
    build:
      context: ./
      dockerfile: ./docker/config/php/sp-dockerfile
    container_name: ${SERVICE_SP}
    restart: unless-stopped
    working_dir: /var/www
    command:
        - supervisord
    env_file:
        - .env
    environment:
        SERVICE_NAME: ${SERVICE_SP}
        SERVICE_TAGS: ${ENV}
        APP_URL: ${APP_URL}
        DB_CONNECTION: ${DB_CONNECTION}
        DB_HOST: ${DB_HOST}
        DB_DATABASE: ${DB_DATABASE}_${ENV}
        DB_USERNAME: ${DB_USERNAME}
        DB_PASSWORD: ${DB_PASSWORD}
        DB_PREFIX: ${CORE_DB_PREFIX}
        REDIS_CLIENT: ${REDIS_CLIENT}
        REDIS_HOST: ${SERVICE_REDIS}
        REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
        - ./:/var/www
        - ./docker/config/php/core.${ENV}.ini:/usr/local/etc/php/conf.d/custom.ini
        - ./docker/config/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf
        - ./docker/logs/supervisor:/var/log/supervisor
        - ${CERTS_DIRECTORY}:/etc/certs
    depends_on:
        db:
            condition: service_healthy
#        redis:
#            condition: service_healthy
    expose:
        - 9000
        - 6001
    networks:
        - network

  db:
    image: mysql:${VERSION_MYSQL}
    container_name: ${SERVICE_CORE_DB}
    restart: unless-stopped
    tty: true
    volumes:
      - ddbdata:/var/lib/mysql
      - ./docker/logs/db/mysql:/var/log/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${CORE_DB_PASSWORD_ROOT}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${CORE_DB_PASSWORD_ROOT}
      MYSQL_DATABASE: ${DB_DATABASE}_${ENV}
    healthcheck:
      test: "mysqladmin ping -u root -p${CORE_DB_PASSWORD_ROOT}"
      retries: 3
      timeout: 5s
    ports:
      - ${CORE_DB_PORT_MASTER_EXT}:${CORE_DB_PORT_INT}
    networks:
      - network

  socket:
    image: quay.io/soketi/soketi:1.4-16-debian
    container_name: ${SERVICE_SOCKET}
    restart: unless-stopped
    env_file: .env
    depends_on:
      - redis
    environment:
      DEBUG: ${SOKETI_DEBUG}
      SOKETI_DEBUG: ${SOKETI_DEBUG}
      SOKETI_METRICS_SERVER_PORT: 9601
      SOKETI_DEFAULT_APP_ID: ${PUSHER_APP_ID}
      SOKETI_DEFAULT_APP_KEY: ${PUSHER_APP_KEY}
      SOKETI_DEFAULT_APP_SECRET: ${PUSHER_APP_SECRET}
    ports:
      - ${SOKETI_PORT_EXT}:${SOKETI_PORT_INT}
      - 9601:9601
    networks:
      - network

  redis:
    image: redis:${VERSION_REDIS}
    container_name: ${SERVICE_REDIS}
    restart: unless-stopped
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    environment:
        REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
        - redisdata:/data
        - ./docker/config/redis/redis.conf:/usr/local/etc/redis/redis.conf
        - ./docker/logs/db/redis:/var/log/redis
    healthcheck:
        test: [ "CMD", "redis-cli", "ping" ]
        retries: 3
        interval: 10s
    ports:
        - ${REDIS_PORT_EXT}:${REDIS_PORT_INT}
    networks:
        - network

networks:
  network:
    driver: bridge

volumes:
  ddbdata:
  redisdata:
